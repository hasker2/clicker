import aiogram.utils.exceptions
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.deep_linking import get_start_link, decode_payload
import random
import os
import asyncio
import asyncpg
from aiogram.utils.exceptions import Throttled
from aiogram.contrib.fsm_storage.memory import MemoryStorage

dsn = "dbname='hcnpekzf' user='hcnpekzf' host='mel.db.elephantsql.com' password='cEgK9xYY5la2HnxsLEg6A4c4sTcHYMMV'"
bot = Bot(token="5862467541:AAFnIYv2VCwJICMMhBZwyqRTeYlNP_sn7cA")
allowedlist = ['creator', 'owner', 'admin', 'member']
admins = [5488988760, 1377307544, 5404798380]
checklist = [-1001761893270]
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)





@dp.message_handler(commands=['sendtoall'])
async def process_start_command(message: types.Message):
    if message.chat.id in admins:
        conn = await asyncpg.connect(user='owner', password='GjYlPZFaqyEK40VZqh3K5c4mxBQLZvpb',
                                     database='users_fxd8', host='g-a.singapore-postgres.render.com')
        ids = await conn.fetch("select id from users")
        for i in ids:
            await bot.send_message(tuple(i)[0], message.text.split(" ", 1), parse_mode="HTML")


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    conn = await asyncpg.connect(user='owner', password='GjYlPZFaqyEK40VZqh3K5c4mxBQLZvpb',
                                 database='users_fxd8', host='g-a.singapore-postgres.render.com')

    reflink = message.get_args()
    if reflink:
        try:
            mainid = tuple(await conn.fetchrow(f"select id from users where id = {message.chat.id}"))
        except TypeError:
            await conn.execute(f"insert into users (id) values ({message.chat.id})")
            await conn.execute(f"update users set refs = refs + 1 where id = {reflink}")
        except Exception as e:
            print(e)
    a = []
    checkedlist = []
    for i in checklist:
        usersub = await bot.get_chat_member(i, message.from_user.id)
        if usersub.status in allowedlist:
            print(usersub.status)
            checkedlist.append(True)
        else:
            checkedlist.append(False)
        print(checkedlist)

    if False in checkedlist:

        kb = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton(text='–°–ø–æ–Ω—Å–æ—Ä ‚Ññ1Ô∏è‚É£', url='https://t.me/standoffsila')
        btn3 = types.InlineKeyboardButton(text='‚úÖ–ü–†–û–í–ï–†–ò–¢–¨‚úÖ', callback_data='checksubs')
        kb.row(btn1)
        kb.add(btn3)
        await bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —ç—Ç–æ—Ç –±–æ—Ç - <b>–∫–ª–∏–∫–µ—Ä –≥–æ–ª–¥—ã –≤ <u>Standoff 2</u></b>\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ', parse_mode='HTML', reply_markup=kb)
        await conn.close()
    else:
        kb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = types.KeyboardButton(text='üî•–ö–ª–∏–∫üî•Ô∏è')
        btn2 = types.KeyboardButton(text='–ë–∞–ª–∞–Ω—Åüíµ')
        btn3 = types.KeyboardButton(text='–í—ã–≤–æ–¥üíµ‚¨Ü')
        btn5 = types.KeyboardButton(text='–û—Ç–∑—ã–≤—ãüõí')
        kb.add(btn1)
        kb.row(btn2, btn3)
        kb.row(btn5)
        try:
            await conn.execute(f"insert into users (id) values ({message.chat.id})")
        except Exception as e:
            print(e)

        await bot.send_message(message.chat.id, f'–ú–µ–Ω—é ', reply_markup=kb, parse_mode='HTML')
    await conn.close()
@dp.callback_query_handler(text= ['checksubs'])
async def checksubs(callback: types.CallbackQuery):
    print(callback)
    try:
        first = await bot.get_chat_member(-1001761893270, callback.from_user.id)
        if first.status in allowedlist:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            kb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            btn1 = types.KeyboardButton(text='üî•–ö–ª–∏–∫üî•Ô∏è')
            btn2 = types.KeyboardButton(text='–ë–∞–ª–∞–Ω—Åüíµ')
            btn3 = types.KeyboardButton(text='–í—ã–≤–æ–¥üíµ‚¨Ü')
            btn5 = types.KeyboardButton(text='–û—Ç–∑—ã–≤—ãüõí')
            kb.add(btn1)
            kb.row(btn2, btn3)
            kb.row(btn5)
            await bot.send_message(callback.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n<i>(–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥)</i>', reply_markup=kb, parse_mode='HTML')
        else:
            await bot.answer_callback_query(callback.id, '‚ö†Ô∏è–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤—ã—à–µ‚ö†Ô∏è', show_alert=True)
    except:
        await bot.send_message(callback.message.chat.id, '‚ùó–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –õ—É—á—à–µ –∂–º–∏ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –±–æ—Ç–∞ (–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤)')

@dp.message_handler(text='–û—Ç–∑—ã–≤—ãüõí')
async def reviews(message: types.Message):
    await bot.send_message(message.chat.id, f'–û—Ç–∑—ã–≤—ã \n\nhttps://t.me/clickergolldy_otzivi\nhttps://t.me/clickergolldy_otzivi\nhttps://t.me/clickergolldy_otzivi')

@dp.message_handler(text='üî•–ö–ª–∏–∫üî•Ô∏è')
@dp.throttled(rate=0.25)
async def click(message: types.Message):
    gold = round(random.uniform(0.1, 1.0), 2)
    await bot.send_message(message.chat.id, f'–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ <u>{gold}</u> Güî•üî•\n–°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ 0.25 —Å–µ–∫—É–Ω–¥—ã', parse_mode="HTML")
    conn = await asyncpg.connect(user='owner', password='GjYlPZFaqyEK40VZqh3K5c4mxBQLZvpb',
                                 database='users_fxd8', host='g-a.singapore-postgres.render.com')
    await conn.execute(f"update users set balance = balance + {gold} where id = {message.chat.id}")
    await conn.close()

@dp.message_handler(text='–í—ã–≤–æ–¥üíµ‚¨Ü')
@dp.throttled(rate=0.5)
async def withdraw(message: types.Message):
    conn = await asyncpg.connect(user='owner', password='GjYlPZFaqyEK40VZqh3K5c4mxBQLZvpb',
                                 database='users_fxd8', host='g-a.singapore-postgres.render.com')
    refs = tuple(await conn.fetchrow(f"select refs from users where id = {message.chat.id}"))[0]
    print(refs)
    gold = tuple(await conn.fetchrow(f"select balance from users where id = {message.chat.id}"))[0]

    link = await get_start_link(str(message.from_user.id))
    if refs < 10:
        await bot.send_message(message.chat.id,
                               f"–î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤—ã –¥–æ–ª–∂–Ω–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 10 –ª—é–¥–µ–π\n–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {refs}/10\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è –º–æ–∂–Ω–æ –ø–æ –≤–∞—à–µ–π –õ–ò–ß–ù–û–ô —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n{link}\n<i>–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Å—á–∏—Ç–∞–ª—å—Å—è –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å Start</i>",
                               parse_mode="HTML")
    elif gold < 2155:
        await bot.send_message(message.chat.id,
                               f"‚Äº–í—ã–≤–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—å—Å—è –æ—Ç 2155 G\n"
                               f"‚Ñπ–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {round(gold, 2)}/2155 G\n"
                               f"–¢–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–∫—Ä—É—Ç–∫–∏ü§ñ",
                               parse_mode="HTML")
    await conn.close()
@dp.message_handler(text='–ë–∞–ª–∞–Ω—Åüíµ')
@dp.throttled(rate=0.5)
async def click(message: types.Message):
    conn = await asyncpg.connect(user='owner', password='GjYlPZFaqyEK40VZqh3K5c4mxBQLZvpb',
                                 database='users_fxd8', host='g-a.singapore-postgres.render.com')

    balance = tuple(await conn.fetchrow(f"select balance from users where id = {message.chat.id}"))[0]

    await bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å = {round(float(balance), 2)} G', parse_mode="HTML")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    
